#include <exception>
#include <iostream>
#include <vector>
#include <initializer_list>

template <class T>
class List {
    private:
        T * items;
        int size, free;
    public:
        List();
        List(const std::initializer_list<T>& elements);
        ~List() {}

        void push(T element);
        void push(const std::initializer_list<T>& elements);
        T fetch(int indx);
        void set(int index, T value);

        int length();
        bool is_empty();
        void print();
};

class Big_Number {

};

int main(int argc, char **argv) {
    List<int> foo = {3, 4, 5};
    foo.print();
}

template <class T>
List<T>::List() {
    size = 0;
}

template <class T>
List<T>::List(const std::initializer_list<T>& elements) {
    items = new int[elements.size()];
    int i = 0; size = elements.size();
    for (auto e : elements) {
        items[i] = e;
        ++i;
    }
}

template <class T>
void List<T>::push(T element) {

}

template <class T>
void List<T>::push(const std::initializer_list<T>& elements) {
}

template <class T>
int List<T>::length() {
    return size;
}

template <class T>
bool List<T>::is_empty() {
    return size == 0;
}

template <class T>
void List<T>::print() {
    for (int i = 0; i < size; ++i) {
        std::cout << items[i];
    }
}
